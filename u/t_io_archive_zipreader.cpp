/**
  *  \file u/t_io_archive_zipreader.cpp
  *  \brief Test for afl::io::archive::ZipReader
  */

#include "afl/io/archive/zipreader.hpp"

#include "t_io_archive.hpp"
#include "afl/io/constmemorystream.hpp"
#include "afl/io/internalstream.hpp"
#include "afl/except/fileproblemexception.hpp"
#include "afl/except/fileformatexception.hpp"

namespace {
    uint8_t SAMPLE_ZIP[] = {
        0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x6b,
        0x57, 0x49, 0x53, 0x74, 0x24, 0xf4, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00,
        0x00, 0x00, 0x09, 0x00, 0x1c, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e,
        0x74, 0x78, 0x74, 0x55, 0x54, 0x09, 0x00, 0x03, 0xa3, 0x9e, 0x0c, 0x58,
        0xa3, 0x9e, 0x0c, 0x58, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03,
        0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
        0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0a, 0x50, 0x4b, 0x03, 0x04,
        0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x79, 0x6b, 0x57, 0x49, 0xe0, 0x42,
        0x28, 0x88, 0x1c, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x08, 0x00,
        0x1c, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x55, 0x54,
        0x09, 0x00, 0x03, 0xb5, 0x9e, 0x0c, 0x58, 0xaf, 0x9e, 0x0c, 0x58, 0x75,
        0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03,
        0x00, 0x00, 0x0b, 0x2a, 0xcd, 0xcb, 0xcb, 0xcc, 0x4b, 0x57, 0x30, 0x35,
        0x30, 0x53, 0x28, 0x49, 0x2d, 0x2e, 0x29, 0xd6, 0x1b, 0x05, 0x23, 0x14,
        0xf8, 0x7b, 0x2b, 0x72, 0x01, 0x00, 0x50, 0x4b, 0x01, 0x02, 0x1e, 0x03,
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x6b, 0x57, 0x49, 0x53, 0x74,
        0x24, 0xf4, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa4, 0x81,
        0x00, 0x00, 0x00, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x74, 0x78,
        0x74, 0x55, 0x54, 0x05, 0x00, 0x03, 0xa3, 0x9e, 0x0c, 0x58, 0x75, 0x78,
        0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x04, 0xe8, 0x03, 0x00,
        0x00, 0x50, 0x4b, 0x01, 0x02, 0x1e, 0x03, 0x14, 0x00, 0x00, 0x00, 0x08,
        0x00, 0x79, 0x6b, 0x57, 0x49, 0xe0, 0x42, 0x28, 0x88, 0x1c, 0x00, 0x00,
        0x00, 0x0f, 0x02, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x50, 0x00, 0x00, 0x00, 0x74,
        0x65, 0x73, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x55, 0x54, 0x05, 0x00, 0x03,
        0xb5, 0x9e, 0x0c, 0x58, 0x75, 0x78, 0x0b, 0x00, 0x01, 0x04, 0xe8, 0x03,
        0x00, 0x00, 0x04, 0xe8, 0x03, 0x00, 0x00, 0x50, 0x4b, 0x05, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x9d, 0x00, 0x00, 0x00, 0xae,
        0x00, 0x00, 0x00, 0x00, 0x00
    };

    uint8_t HELLO_TXT[] = {
        0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
        0x0a
    };

    uint8_t TEST_LOG[] = {
        0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x35, 0x30, 0x36, 0x20,
        0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e,
        0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x4f, 0x4b, 0x21, 0x0a
    };

}

/** Test reading the zip file members. */
void
TestIoArchiveZipReader::testReadMembers()
{
    // Open zip file
    afl::base::Ref<afl::io::archive::ZipReader> testee(afl::io::archive::ZipReader::open(*new afl::io::ConstMemoryStream(SAMPLE_ZIP), 0));

    // Read member "hello.txt", an uncompressed member
    {
        afl::base::Ref<afl::io::Stream> in(testee->openFile("hello.txt", afl::io::FileSystem::OpenRead));
        afl::io::InternalStream out;
        out.copyFrom(*in);
        TS_ASSERT(out.getContent().equalContent(HELLO_TXT));
    }

    // Read member "test.log", a compressed member
    {
        afl::base::Ref<afl::io::Stream> in(testee->openFile("test.log", afl::io::FileSystem::OpenRead));
        afl::io::InternalStream out;
        out.copyFrom(*in);
        TS_ASSERT(out.getContent().equalContent(TEST_LOG));
    }
}

/** Test bad operations. */
void
TestIoArchiveZipReader::testBadOperations()
{
    // Try modifications
    {
        afl::base::Ref<afl::io::archive::ZipReader> testee(afl::io::archive::ZipReader::open(*new afl::io::ConstMemoryStream(SAMPLE_ZIP), 0));

        // Modify existing
        TS_ASSERT_THROWS(testee->openFile("hello.txt", afl::io::FileSystem::OpenWrite), afl::except::FileProblemException);
        TS_ASSERT_THROWS(testee->openFile("hello.txt", afl::io::FileSystem::Create), afl::except::FileProblemException);

        // Open nonexistant
        TS_ASSERT_THROWS(testee->openFile("bye.txt", afl::io::FileSystem::OpenRead), afl::except::FileProblemException);

        // Delete
        TS_ASSERT_THROWS(testee->erase("hello.txt"), afl::except::FileProblemException);
        TS_ASSERT_THROWS(testee->erase("bye.txt"), afl::except::FileProblemException);
    }

    // Not a zip file
    {
        afl::base::Ptr<afl::io::archive::ZipReader> testee;
        // These errors are currently not detected; if it does not look like a zip, it is treated empty:
        //   TS_ASSERT_THROWS(testee = afl::io::archive::ZipReader::open(*new afl::io::ConstMemoryStream(HELLO_TXT), 0).asPtr(), afl::except::FileFormatException);
        //   TS_ASSERT_THROWS(testee = afl::io::archive::ZipReader::open(*new afl::io::ConstMemoryStream(afl::base::ConstBytes_t()), 0).asPtr(), afl::except::FileFormatException);

        // Truncated zip is detected up to a point:
        for (size_t i = 4; i < 30; ++i) {
            TS_ASSERT_THROWS(testee = afl::io::archive::ZipReader::open(*new afl::io::ConstMemoryStream(afl::base::ConstBytes_t(SAMPLE_ZIP).subrange(0, i)), 0).asPtr(), afl::except::FileFormatException);
        }
    }
}

